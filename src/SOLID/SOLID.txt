Los 5 principios S.O.L.I.D. de diseño de software son:

S – Single Responsibility Principle (SRP)

O – Open/Closed Principle (OCP)

L – Liskov Substitution Principle (LSP)

I – Interface Segregation Principle (ISP)

D – Dependency Inversion Principle (DIP)

El principio SOLID nos indica como organizar nuestras funciones
y estructuras de datos en componenetes y como dichos componentres
debene estar interconectados

**************** SPR - Principio De Responsabilidad Unica *********************
"Nunca deberia haber mas de un motivo por el cual
 cambiar una clase o un modulo" - Robert C. Martin.

"Tener una unica responsabilidad" !== "hacer una unica cosa" .

- Detectar Violaciones:
  . Nombres de clases y modulos demasiados genericos.
  . Cambios en el codigo suelen afectar la clase o modulo.
  . Las clases involucran multiples capas.
  . Numero elevado de importaciones.
  . Cantidad elevada de metodos publicos.
  . Excesivo numero de lineas de codigo.

***************** PRINCIPIO ABIERTO Y CERRADO ******************
Es un principio que depende mucho del contexto.

- Establece que las entidades de software(clases, modulos, metodos, etc.)
  deben estar abiertas para la extension, pero cerradas para la modificacion.

- La forma mas sencilla de demostrar este principio es considerar un metodo
  que hace una cosa.

- El principio abierto- cerrado tambien se puede lograr de muchas maneras,
  incluso mediante el uso de la herencia o mendiante patrones de diseño de
  composicion como el patron de estrategia.

Detectar Violaciones De OCP:
  - Cambios normalmente afectan nuestra clase o modulo.
  - Cuando una clase o modulo afecta muchas capas. (Presentacion,
    Almacenamiento, etc.)


***************** PRINCIPIO SUSTITUCION DE LISKOV ******************
" Siendo U un subtipo de T, cualquier instancia de T deberia poder ser
  sustituida por cualquier instancia de U sin alterar las propiedades del
  sistema ".


***************** PRINCIPIO DE Interface Segregation Principle (ISP) ***************
" Los clientes no deberian estar obligados a depender de interfaces que no utilicen" Robert C.

Detectar Violaciones ISP
- Si las interfaces que diseñamos nos obligan a violar los principios de responsabilidad unica
  y Substitucion de Liskov


***************** PRINCIPIO Dependency Inversion Principle (DIP)  ***************
" Los modulos de alto nivel no deben depender de modulos de bajos nivel.
  Ambos deben depender de abstracciones. Las abstracciones no deben depender
  de concreciones. Los detalles deben depender de abstracciones".

  - Los modulos de alto nivel no deberian depender de modulos de bbajo nivel.
  - Ambos deberian depender de abstracciones.
  - Las abstracciones no deberian depender de detalles.
  - Los detalles deberian depende de abstracciones.

Los componenetes mas importantes son aquelllos centrados en resolver el problema subyacente al negocio,
es decir, la capa de dominio.
Los menos importantes son los que estan proximos al la infraestrurctura, es decir aquelllos
relacionados con la UI, la persistencia, la comunicacion con API externas, etc.

Inyeccion de Dependencias
  Dependencia en programacion, significa que un modulo o componente requiere de otro para poder
  realizar su trabajo.

En algun momento nuestro programa o aplicacion llegara a estar formado por muchos modulos. Cuando esto
pase, es cuando debemos usar Inyeccion de dependencias.
